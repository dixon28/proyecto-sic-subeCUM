/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package contMateriaPrima;

import MateriaPrima.kardexAux;

import java.awt.GraphicsConfiguration;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import otros.TModeloKardex;
import otros.allFrames;
import otros.conexionBD;

/**
 *
 * @author sic
 */
public class KardexMP extends javax.swing.JFrame {

    conexionBD conect = new conexionBD();
    TModeloKardex modelo = new TModeloKardex();

    public KardexMP(GraphicsConfiguration gc) {
        super(gc);
    }

    /**
     * Creates new form KardexMP
     */
    public KardexMP() {
        initComponents();
        allFrames.aplicarTema(this);
        this.setLocationRelativeTo(null);
        new allFrames().CargarIcono(this);
        this.setTitle("Menu Principal para Manejo de Kardex");
        this.setResizable(false);
        inicializarColumnas();
        fillcombomp();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboMP = new javax.swing.JComboBox();
        btnCargar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        comboMP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnCargar.setText("Cargar Registros");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        jTable1.setModel(modelo);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(comboMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnCargar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCargar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        modelo.listaRegK.clear();
        cargarRegistros((String) comboMP.getSelectedItem());


    }//GEN-LAST:event_btnCargarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KardexMP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KardexMP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KardexMP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KardexMP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KardexMP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    private javax.swing.JComboBox comboMP;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void inicializarColumnas() {

        TableColumnModel tColumnModel = new DefaultTableColumnModel();
        for (int i = 0; i < 10; i++) {
            TableColumn col = new TableColumn(i);
            switch (i) {
                case 0:
                    col.setHeaderValue("Fecha");
                    break;
                case 1:
                    col.setHeaderValue("Cantidad");
                    break;
                case 2:
                    col.setHeaderValue("C.U");
                    break;

                case 3:

                    col.setHeaderValue("Costo");
                    break;
                case 4:
                    col.setHeaderValue("Cantidad");
                    break;
                case 5:
                    col.setHeaderValue("C.U");
                    break;

                case 6:

                    col.setHeaderValue("Costo");
                    break;
                case 7:
                    col.setHeaderValue("Cantidad");
                    break;
                case 8:
                    col.setHeaderValue("C.U");
                    break;

                case 9:

                    col.setHeaderValue("Costo");

            }
            tColumnModel.addColumn(col);
        }
        this.jTable1.setColumnModel(tColumnModel);

    }

    private void fillcombomp() {

        try {
            comboMP.removeAllItems();
            String sqlGeneral = "select * from tipo_materia";
            PreparedStatement declaracion1;
            declaracion1 = null;
            declaracion1 = this.conect.getConexion().prepareCall(sqlGeneral);
            ResultSet resultado1 = declaracion1.executeQuery();
            while (resultado1.next()) {
                String name = resultado1.getString("nombremateria");
                comboMP.addItem(name);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    private void cargarRegistros(String string) {

        String sqlRegistros = "select *from registro_kardex where idtipomat=(select idtipomat from tipo_materia where nombremateria=?)";

        try {
            PreparedStatement sentenciaRegistros = this.conect.getConexion().prepareStatement(sqlRegistros);
            sentenciaRegistros.setString(1, string);
            ResultSet resultado1 = sentenciaRegistros.executeQuery();

            while (resultado1.next()) {

                kardexAux karAux = new kardexAux();
                if (resultado1.getBoolean("entrada"))//analisis entrada
                {

                    String extraccion1 = "select *from entradas where idtipomat=? and fecha_entrada=?";
                    PreparedStatement sentenciaE = this.conect.getConexion().prepareStatement(extraccion1);
                    sentenciaE.setInt(1, resultado1.getInt("idtipomat"));
                    sentenciaE.setDate(2, resultado1.getDate("fecha_entrada"));

                    ResultSet resultado2 = sentenciaE.executeQuery();
                    resultado2.next();
                    karAux.setFecha(resultado1.getDate("fecha_entrada"));
                    karAux.setCantE(resultado2.getInt("cantidad_entrada"));
                    karAux.setCuE(resultado2.getDouble("costounitario_en"));
                    karAux.setCtE(resultado2.getDouble("costototal_entrada"));
                    karAux.setCantSaldo(resultado1.getInt("cantidad_mat"));
                    karAux.setCuSaldo(resultado1.getDouble("costouni_mat"));
                    karAux.setCtSaldo(resultado1.getDouble("costototal"));

                    this.modelo.listaRegK.add(karAux);

                } else {
                    /*
                     karAux.setFecha(resultado1.getDate("fecha_entrada"));
                     karAux.setCantS(resultado1.getInt("cantidad_mat"));
                     karAux.setCuS(resultado1.getDouble("costouni_mat"));
                     karAux.setCtS(resultado1.getDouble("costototal"));
                     karAux.setCantSaldo(resultado1.getInt("cantidad_mat"));
                     karAux.setCuSaldo(resultado1.getDouble("costouni_mat"));
                     karAux.setCtSaldo(resultado1.getDouble("costototal"));
                     */
                    String extraccion1 = "select *from salidas_kardex where idtipomat=? and fecha_salida=?";
                    PreparedStatement sentenciaS = this.conect.getConexion().prepareStatement(extraccion1);
                    sentenciaS.setInt(1, resultado1.getInt("idtipomat"));
                    sentenciaS.setDate(2, resultado1.getDate("fecha_entrada"));
                    ResultSet resultado3 = sentenciaS.executeQuery();
                    resultado3.next();
                    karAux.setFecha(resultado3.getDate("fecha_salida"));
                    karAux.setCantS(resultado3.getInt("cantidad_salida"));
                    karAux.setCuS(resultado3.getDouble("costosalida"));
                    karAux.setCtS(resultado3.getDouble("costototalsal"));
                    /* karAux.setCantSaldo(resultado1.getInt("cantidad_mat"));
                     karAux.setCuSaldo(resultado1.getDouble("costouni_mat"));
                     karAux.setCtSaldo(resultado1.getDouble("costototal"));
                     */
                    this.modelo.listaRegK.add(karAux);

                }

                modelo.fireTableDataChanged();

            }

        } catch (SQLException ex) {
            Logger.getLogger(KardexMP.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
